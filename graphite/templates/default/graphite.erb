#! /bin/sh
### BEGIN INIT INFO
# Provides:          gunicorn-graphite
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Should-Start:      $nginx
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: virtualenv + gunicorn + nginx debian init script
# Description:       virtualenv + gunicorn + nginx debian init script
### END INIT INFO

PROJECT=/opt/graphite/webapp/graphite/
SOCKET="unix:/tmp/graphite.socket"
PATH=/sbin:/usr/sbin:/bin:/usr/bin
USER=<%= node.graphite.user %>
WORKERS=<%= node.graphite[:workers] || 1 %>
NAME=graphite
DESC=$NAME
PIDFILE="/tmp/gunicorn_$NAME.pid"

DAEMON=/usr/bin/gunicorn_django
DAEMON_ARGS="--user=$USER --group=$GROUP --workers=$WORKERS --bind=$SOCKET --pid=$PIDFILE --name=$NAME --log-level=info"
USER=<%= node.graphite.user %>
SCRIPTNAME=/etc/init.d/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
  # Return
  #   0 if daemon has been started
  #   1 if daemon was already running
  #   2 if daemon could not be started
  start-stop-daemon -d $PROJECT --start --quiet --pidfile $PIDFILE --chuid $USER --exec $DAEMON --test > /dev/null \
    || return 1
  start-stop-daemon -d $PROJECT --start --quiet --pidfile $PIDFILE --chuid $USER --exec $DAEMON -- $DAEMON_ARGS 2>&1 | logger -t graphite &
  # Add code here, if necessary, that waits for the process to be ready
  # to handle requests from services started subsequently which depend
  # on this one.  As a last resort, sleep for some time.
}

#
# Function that stops the daemon/service
#
do_stop()
{
  # Return
  #   0 if daemon has been stopped
  #   1 if daemon was already stopped
  #   2 if daemon could not be stopped
  #   other if a failure occurred
  start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE
  RETVAL="$?"
  [ "$RETVAL" = 2 ] && return 2
  # Ensure the pidfile is cleared
  rm -f $PIDFILE
  return "$RETVAL"
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
  start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE
  return 0
}

#
# Function that sends a SIGUSR2 to the daemon/service
#
do_graceful_reload() {
  start-stop-daemon --stop --signal USR2 --quiet --pidfile $PIDFILE
  return 0
}

case "$1" in
  start)
  [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
  do_start
  case "$?" in
    0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
    2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
  esac
  ;;
  stop)
  [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
  do_stop
  case "$?" in
    0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
    2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
  esac
  ;;
  status)
       status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
       ;;
  reload)
  log_daemon_msg "Reloading $DESC" "$NAME"
  do_reload
  log_end_msg $?
  ;;
  graceful-reload)
  log_daemon_msg "Gracefully reloading $DESC" "$NAME"
  do_graceful_reload
  log_end_msg $?
  ;;
  restart)
  log_daemon_msg "Restarting $DESC" "$NAME"
  do_stop
  case "$?" in
    0|1)
    do_start
    case "$?" in
      0) log_end_msg 0 ;;
      1) log_end_msg 1 ;; # Old process is still running
      *) log_end_msg 1 ;; # Failed to start
    esac
    ;;
    *)
      # Failed to stop
    log_end_msg 1
    ;;
  esac
  ;;
  *)
  echo "Usage: $SCRIPTNAME {start|stop|status|restart|graceful-reload|reload}" >&2
  exit 3
  ;;
esac

: